{
  "version": 3,
  "sources": ["../../../src/chat.mjs", "file:///C:/Users/SouKon/AppData/Roaming/nvm/v24.4.0/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../bundle-cOcfh1/middleware-insertion-facade.js", "file:///C:/Users/SouKon/AppData/Roaming/nvm/v24.4.0/node_modules/wrangler/templates/middleware/common.ts", "../bundle-cOcfh1/middleware-loader.entry.ts"],
  "sourceRoot": "E:\\code\\workers-chat-puzzle\\.wrangler\\tmp\\dev-8jEa4M",
  "sourcesContent": ["// This is the Edge Chat Demo Worker, built using Durable Objects!\r\n\r\n// ===============================\r\n// Introduction to Modules\r\n// ===============================\r\n//\r\n// The first thing you might notice, if you are familiar with the Workers platform, is that this\r\n// Worker is written differently from others you may have seen. It even has a different file\r\n// extension. The `mjs` extension means this JavaScript is an ES Module, which, among other things,\r\n// means it has imports and exports. Unlike other Workers, this code doesn't use\r\n// `addEventListener(\"fetch\", handler)` to register its main HTTP handler; instead, it _exports_\r\n// a handler, as we'll see below.\r\n//\r\n// This is a new way of writing Workers that we expect to introduce more broadly in the future. We\r\n// like this syntax because it is *composable*: You can take two workers written this way and\r\n// merge them into one worker, by importing the two Workers' exported handlers yourself, and then\r\n// exporting a new handler that call into the other Workers as appropriate.\r\n//\r\n// This new syntax is required when using Durable Objects, because your Durable Objects are\r\n// implemented by classes, and those classes need to be exported. The new syntax can be used for\r\n// writing regular Workers (without Durable Objects) too, but for now, you must be in the Durable\r\n// Objects beta to be able to use the new syntax, while we work out the quirks.\r\n//\r\n// To see an example configuration for uploading module-based Workers, check out the wrangler.toml\r\n// file or one of our Durable Object templates for Wrangler:\r\n//   * https://github.com/cloudflare/durable-objects-template\r\n//   * https://github.com/cloudflare/durable-objects-rollup-esm\r\n//   * https://github.com/cloudflare/durable-objects-webpack-commonjs\r\n\r\n// ===============================\r\n// Required Environment\r\n// ===============================\r\n//\r\n// This worker, when deployed, must be configured with two environment bindings:\r\n// * rooms: A Durable Object namespace binding mapped to the ChatRoom class.\r\n// * limiters: A Durable Object namespace binding mapped to the RateLimiter class.\r\n//\r\n// Incidentally, in pre-modules Workers syntax, \"bindings\" (like KV bindings, secrets, etc.)\r\n// appeared in your script as global variables, but in the new modules syntax, this is no longer\r\n// the case. Instead, bindings are now delivered in an \"environment object\" when an event handler\r\n// (or Durable Object class constructor) is called. Look for the variable `env` below.\r\n//\r\n// We made this change, again, for composability: The global scope is global, but if you want to\r\n// call into existing code that has different environment requirements, then you need to be able\r\n// to pass the environment as a parameter instead.\r\n//\r\n// Once again, see the wrangler.toml file to understand how the environment is configured.\r\n\r\n// =======================================================================================\r\n// The regular Worker part...\r\n//\r\n// This section of the code implements a normal Worker that receives HTTP requests from external\r\n// clients. This part is stateless.\r\n\r\n// With the introduction of modules, we're experimenting with allowing text/data blobs to be\r\n// uploaded and exposed as synthetic modules. In wrangler.toml we specify a rule that files ending\r\n// in .html should be uploaded as \"Data\", equivalent to content-type `application/octet-stream`.\r\n// So when we import it as `HTML` here, we get the HTML content as an `ArrayBuffer`. This lets us\r\n// serve our app's static asset without relying on any separate storage. (However, the space\r\n// available for assets served this way is very limited; larger sites should continue to use Workers\r\n// KV to serve assets.)\r\nimport HTML from \"./chat.html\";\r\n\r\n// `handleErrors()` is a little utility function that can wrap an HTTP request handler in a\r\n// try/catch and return errors to the client. You probably wouldn't want to use this in production\r\n// code but it is convenient when debugging and iterating.\r\nasync function handleErrors(request, func) {\r\n  try {\r\n    return await func();\r\n  } catch (err) {\r\n    if (request.headers.get(\"Upgrade\") == \"websocket\") {\r\n      // Annoyingly, if we return an HTTP error in response to a WebSocket request, Chrome devtools\r\n      // won't show us the response body! So... let's send a WebSocket response with an error\r\n      // frame instead.\r\n      let pair = new WebSocketPair();\r\n      pair[1].accept();\r\n      pair[1].send(JSON.stringify({error: err.stack}));\r\n      pair[1].close(1011, \"Uncaught exception during session setup\");\r\n      return new Response(null, { status: 101, webSocket: pair[0] });\r\n    } else {\r\n      return new Response(err.stack, {status: 500});\r\n    }\r\n  }\r\n}\r\n\r\n// In modules-syntax workers, we use `export default` to export our script's main event handlers.\r\n// Here, we export one handler, `fetch`, for receiving HTTP requests. In pre-modules workers, the\r\n// fetch handler was registered using `addEventHandler(\"fetch\", event => { ... })`; this is just\r\n// new syntax for essentially the same thing.\r\n//\r\n// `fetch` isn't the only handler. If your worker runs on a Cron schedule, it will receive calls\r\n// to a handler named `scheduled`, which should be exported here in a similar way. We will be\r\n// adding other handlers for other types of events over time.\r\nexport default {\r\n  async fetch(request, env) {\r\n    return await handleErrors(request, async () => {\r\n      // We have received an HTTP request! Parse the URL and route the request.\r\n\r\n      let url = new URL(request.url);\r\n      let path = url.pathname.slice(1).split('/');\r\n\r\n      if (!path[0]) {\r\n        // Serve our HTML at the root path.\r\n        return new Response(HTML, {headers: {\"Content-Type\": \"text/html;charset=UTF-8\"}});\r\n      }\r\n\r\n      switch (path[0]) {\r\n        case \"api\":\r\n          // This is a request for `/api/...`, call the API handler.\r\n          return handleApiRequest(path.slice(1), request, env);\r\n\r\n        default:\r\n          return new Response(\"Not found\", {status: 404});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n\r\nasync function handleApiRequest(path, request, env) {\r\n  // We've received at API request. Route the request based on the path.\r\n\r\n  switch (path[0]) {\r\n    case \"room\": {\r\n      // Request for `/api/room/...`.\r\n\r\n      if (!path[1]) {\r\n        // The request is for just \"/api/room\", with no ID.\r\n        if (request.method == \"POST\") {\r\n          // POST to /api/room creates a private room.\r\n          //\r\n          // Incidentally, this code doesn't actually store anything. It just generates a valid\r\n          // unique ID for this namespace. Each durable object namespace has its own ID space, but\r\n          // IDs from one namespace are not valid for any other.\r\n          //\r\n          // The IDs returned by `newUniqueId()` are unguessable, so are a valid way to implement\r\n          // \"anyone with the link can access\" sharing. Additionally, IDs generated this way have\r\n          // a performance benefit over IDs generated from names: When a unique ID is generated,\r\n          // the system knows it is unique without having to communicate with the rest of the\r\n          // world -- i.e., there is no way that someone in the UK and someone in New Zealand\r\n          // could coincidentally create the same ID at the same time, because unique IDs are,\r\n          // well, unique!\r\n          let id = env.rooms.newUniqueId();\r\n          return new Response(id.toString(), {headers: {\"Access-Control-Allow-Origin\": \"*\"}});\r\n        } else {\r\n          // If we wanted to support returning a list of public rooms, this might be a place to do\r\n          // it. The list of room names might be a good thing to store in KV, though a singleton\r\n          // Durable Object is also a possibility as long as the Cache API is used to cache reads.\r\n          // (A caching layer would be needed because a single Durable Object is single-threaded,\r\n          // so the amount of traffic it can handle is limited. Also, caching would improve latency\r\n          // for users who don't happen to be located close to the singleton.)\r\n          //\r\n          // For this demo, though, we're not implementing a public room list, mainly because\r\n          // inevitably some trolls would probably register a bunch of offensive room names. Sigh.\r\n          return new Response(\"Method not allowed\", {status: 405});\r\n        }\r\n      }\r\n\r\n      // OK, the request is for `/api/room/<name>/...`. It's time to route to the Durable Object\r\n      // for the specific room.\r\n      let name = path[1];\r\n\r\n      // Each Durable Object has a 256-bit unique ID. IDs can be derived from string names, or\r\n      // chosen randomly by the system.\r\n      let id;\r\n      if (name.match(/^[0-9a-f]{64}$/)) {\r\n        // The name is 64 hex digits, so let's assume it actually just encodes an ID. We use this\r\n        // for private rooms. `idFromString()` simply parses the text as a hex encoding of the raw\r\n        // ID (and verifies that this is a valid ID for this namespace).\r\n        id = env.rooms.idFromString(name);\r\n      } else if (name.length <= 32) {\r\n        // Treat as a string room name (limited to 32 characters). `idFromName()` consistently\r\n        // derives an ID from a string.\r\n        id = env.rooms.idFromName(name);\r\n      } else {\r\n        return new Response(\"Name too long\", {status: 404});\r\n      }\r\n\r\n      // Get the Durable Object stub for this room! The stub is a client object that can be used\r\n      // to send messages to the remote Durable Object instance. The stub is returned immediately;\r\n      // there is no need to await it. This is important because you would not want to wait for\r\n      // a network round trip before you could start sending requests. Since Durable Objects are\r\n      // created on-demand when the ID is first used, there's nothing to wait for anyway; we know\r\n      // an object will be available somewhere to receive our requests.\r\n      let roomObject = env.rooms.get(id);\r\n\r\n      // Compute a new URL with `/api/room/<name>` removed. We'll forward the rest of the path\r\n      // to the Durable Object.\r\n      let newUrl = new URL(request.url);\r\n      newUrl.pathname = \"/\" + path.slice(2).join(\"/\");\r\n\r\n      // Send the request to the object. The `fetch()` method of a Durable Object stub has the\r\n      // same signature as the global `fetch()` function, but the request is always sent to the\r\n      // object, regardless of the request's URL.\r\n      return roomObject.fetch(newUrl, request);\r\n    }\r\n\r\n    default:\r\n      return new Response(\"Not found\", {status: 404});\r\n  }\r\n}\r\n\r\n// =======================================================================================\r\n// The ChatRoom Durable Object Class\r\n\r\n// ChatRoom implements a Durable Object that coordinates an individual chat room. Participants\r\n// connect to the room using WebSockets, and the room broadcasts messages from each participant\r\n// to all others.\r\nexport class ChatRoom {\r\n  constructor(state, env) {\r\n    this.state = state\r\n\r\n    // `state.storage` provides access to our durable storage. It provides a simple KV\r\n    // get()/put() interface.\r\n    this.storage = state.storage;\r\n\r\n    // `env` is our environment bindings (discussed earlier).\r\n    this.env = env;\r\n\r\n    // We will track metadata for each client WebSocket object in `sessions`.\r\n    this.sessions = new Map();\r\n    this.state.getWebSockets().forEach((webSocket) => {\r\n      // The constructor may have been called when waking up from hibernation,\r\n      // so get previously serialized metadata for any existing WebSockets.\r\n      let meta = webSocket.deserializeAttachment();\r\n\r\n      // Set up our rate limiter client.\r\n      // The client itself can't have been in the attachment, because structured clone doesn't work on functions.\r\n      // DO ids aren't cloneable, restore the ID from its hex string\r\n      let limiterId = this.env.limiters.idFromString(meta.limiterId);\r\n      let limiter = new RateLimiterClient(\r\n        () => this.env.limiters.get(limiterId),\r\n        err => webSocket.close(1011, err.stack));\r\n\r\n      // We don't send any messages to the client until it has sent us the initial user info\r\n      // message. Until then, we will queue messages in `session.blockedMessages`.\r\n      // This could have been arbitrarily large, so we won't put it in the attachment.\r\n      let blockedMessages = [];\r\n      this.sessions.set(webSocket, { ...meta, limiter, blockedMessages });\r\n    });\r\n\r\n    // We keep track of the last-seen message's timestamp just so that we can assign monotonically\r\n    // increasing timestamps even if multiple messages arrive simultaneously (see below). There's\r\n    // no need to store this to disk since we assume if the object is destroyed and recreated, much\r\n    // more than a millisecond will have gone by.\r\n    this.lastTimestamp = 0;\r\n  }\r\n\r\n  // The system will call fetch() whenever an HTTP request is sent to this Object. Such requests\r\n  // can only be sent from other Worker code, such as the code above; these requests don't come\r\n  // directly from the internet. In the future, we will support other formats than HTTP for these\r\n  // communications, but we started with HTTP for its familiarity.\r\n  async fetch(request) {\r\n    return await handleErrors(request, async () => {\r\n      let url = new URL(request.url);\r\n\r\n      switch (url.pathname) {\r\n        case \"/websocket\": {\r\n          // The request is to `/api/room/<name>/websocket`. A client is trying to establish a new\r\n          // WebSocket session.\r\n          if (request.headers.get(\"Upgrade\") != \"websocket\") {\r\n            return new Response(\"expected websocket\", {status: 400});\r\n          }\r\n\r\n          // Get the client's IP address for use with the rate limiter.\r\n          let ip = request.headers.get(\"CF-Connecting-IP\");\r\n\r\n          // To accept the WebSocket request, we create a WebSocketPair (which is like a socketpair,\r\n          // i.e. two WebSockets that talk to each other), we return one end of the pair in the\r\n          // response, and we operate on the other end. Note that this API is not part of the\r\n          // Fetch API standard; unfortunately, the Fetch API / Service Workers specs do not define\r\n          // any way to act as a WebSocket server today.\r\n          let pair = new WebSocketPair();\r\n\r\n          // We're going to take pair[1] as our end, and return pair[0] to the client.\r\n          await this.handleSession(pair[1], ip);\r\n\r\n          // Now we return the other end of the pair to the client.\r\n          return new Response(null, { status: 101, webSocket: pair[0] });\r\n        }\r\n\r\n        default:\r\n          return new Response(\"Not found\", {status: 404});\r\n      }\r\n    });\r\n  }\r\n\r\n  // handleSession() implements our WebSocket-based chat protocol.\r\n  async handleSession(webSocket, ip) {\r\n    // Accept our end of the WebSocket. This tells the runtime that we'll be terminating the\r\n    // WebSocket in JavaScript, not sending it elsewhere.\r\n    this.state.acceptWebSocket(webSocket);\r\n\r\n    // Set up our rate limiter client.\r\n    let limiterId = this.env.limiters.idFromName(ip);\r\n    let limiter = new RateLimiterClient(\r\n        () => this.env.limiters.get(limiterId),\r\n        err => webSocket.close(1011, err.stack));\r\n\r\n    // Create our session and add it to the sessions map.\r\n    let session = { limiterId, limiter, blockedMessages: [] };\r\n    // attach limiterId to the webSocket so it survives hibernation\r\n    webSocket.serializeAttachment({ ...webSocket.deserializeAttachment(), limiterId: limiterId.toString() });\r\n    this.sessions.set(webSocket, session);\r\n\r\n    // Queue \"join\" messages for all online users, to populate the client's roster.\r\n    for (let otherSession of this.sessions.values()) {\r\n      if (otherSession.name) {\r\n        session.blockedMessages.push(JSON.stringify({joined: otherSession.name}));\r\n      }\r\n    }\r\n\r\n    // Load the last 100 messages from the chat history stored on disk, and send them to the\r\n    // client.\r\n    let storage = await this.storage.list({reverse: true, limit: 100});\r\n    let backlog = [...storage.values()];\r\n    backlog.reverse();\r\n    backlog.forEach(value => {\r\n      session.blockedMessages.push(value);\r\n    });\r\n  }\r\n\r\n  async webSocketMessage(webSocket, msg) {\r\n    try {\r\n      let session = this.sessions.get(webSocket);\r\n      if (session.quit) {\r\n        // Whoops, when trying to send to this WebSocket in the past, it threw an exception and\r\n        // we marked it broken. But somehow we got another message? I guess try sending a\r\n        // close(), which might throw, in which case we'll try to send an error, which will also\r\n        // throw, and whatever, at least we won't accept the message. (This probably can't\r\n        // actually happen. This is defensive coding.)\r\n        webSocket.close(1011, \"WebSocket broken.\");\r\n        return;\r\n      }\r\n\r\n      // Check if the user is over their rate limit and reject the message if so.\r\n      if (!session.limiter.checkLimit()) {\r\n        webSocket.send(JSON.stringify({\r\n          error: \"Your IP is being rate-limited, please try again later.\"\r\n        }));\r\n        return;\r\n      }\r\n\r\n      // I guess we'll use JSON.\r\n      let data = JSON.parse(msg);\r\n\r\n      if (!session.name) {\r\n        // The first message the client sends is the user info message with their name. Save it\r\n        // into their session object.\r\n        session.name = \"\" + (data.name || \"anonymous\");\r\n        // attach name to the webSocket so it survives hibernation\r\n        webSocket.serializeAttachment({ ...webSocket.deserializeAttachment(), name: session.name });\r\n\r\n        // Don't let people use ridiculously long names. (This is also enforced on the client,\r\n        // so if they get here they are not using the intended client.)\r\n        if (session.name.length > 32) {\r\n          webSocket.send(JSON.stringify({error: \"Name too long.\"}));\r\n          webSocket.close(1009, \"Name too long.\");\r\n          return;\r\n        }\r\n\r\n        // Deliver all the messages we queued up since the user connected.\r\n        session.blockedMessages.forEach(queued => {\r\n          webSocket.send(queued);\r\n        });\r\n        delete session.blockedMessages;\r\n\r\n        // Broadcast to all other connections that this user has joined.\r\n        this.broadcast({joined: session.name});\r\n\r\n        webSocket.send(JSON.stringify({ready: true}));\r\n        return;\r\n      }\r\n\r\n      // Construct sanitized message for storage and broadcast.\r\n      data = { name: session.name, message: \"\" + data.message };\r\n\r\n      // Block people from sending overly long messages. This is also enforced on the client,\r\n      // so to trigger this the user must be bypassing the client code.\r\n      if (data.message.length > 256) {\r\n        webSocket.send(JSON.stringify({error: \"Message too long.\"}));\r\n        return;\r\n      }\r\n\r\n      // Add timestamp. Here's where this.lastTimestamp comes in -- if we receive a bunch of\r\n      // messages at the same time (or if the clock somehow goes backwards????), we'll assign\r\n      // them sequential timestamps, so at least the ordering is maintained.\r\n      data.timestamp = Math.max(Date.now(), this.lastTimestamp + 1);\r\n      this.lastTimestamp = data.timestamp;\r\n\r\n      // Broadcast the message to all other WebSockets.\r\n      let dataStr = JSON.stringify(data);\r\n      this.broadcast(dataStr);\r\n\r\n      // Save message.\r\n      let key = new Date(data.timestamp).toISOString();\r\n      await this.storage.put(key, dataStr);\r\n    } catch (err) {\r\n      // Report any exceptions directly back to the client. As with our handleErrors() this\r\n      // probably isn't what you'd want to do in production, but it's convenient when testing.\r\n      webSocket.send(JSON.stringify({error: err.stack}));\r\n    }\r\n  }\r\n\r\n  // On \"close\" and \"error\" events, remove the WebSocket from the sessions list and broadcast\r\n  // a quit message.\r\n  async closeOrErrorHandler(webSocket) {\r\n    let session = this.sessions.get(webSocket) || {};\r\n    session.quit = true;\r\n    this.sessions.delete(webSocket);\r\n    if (session.name) {\r\n      this.broadcast({quit: session.name});\r\n    }\r\n  }\r\n\r\n  async webSocketClose(webSocket, code, reason, wasClean) {\r\n    this.closeOrErrorHandler(webSocket)\r\n  }\r\n\r\n  async webSocketError(webSocket, error) {\r\n    this.closeOrErrorHandler(webSocket)\r\n  }\r\n\r\n  // broadcast() broadcasts a message to all clients.\r\n  broadcast(message) {\r\n    // Apply JSON if we weren't given a string to start with.\r\n    if (typeof message !== \"string\") {\r\n      message = JSON.stringify(message);\r\n    }\r\n\r\n    // Iterate over all the sessions sending them messages.\r\n    let quitters = [];\r\n    this.sessions.forEach((session, webSocket) => {\r\n      if (session.name) {\r\n        try {\r\n          webSocket.send(message);\r\n        } catch (err) {\r\n          // Whoops, this connection is dead. Remove it from the map and arrange to notify\r\n          // everyone below.\r\n          session.quit = true;\r\n          quitters.push(session);\r\n          this.sessions.delete(webSocket);\r\n        }\r\n      } else {\r\n        // This session hasn't sent the initial user info message yet, so we're not sending them\r\n        // messages yet (no secret lurking!). Queue the message to be sent later.\r\n        session.blockedMessages.push(message);\r\n      }\r\n    });\r\n\r\n    quitters.forEach(quitter => {\r\n      if (quitter.name) {\r\n        this.broadcast({quit: quitter.name});\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n// =======================================================================================\r\n// The RateLimiter Durable Object class.\r\n\r\n// RateLimiter implements a Durable Object that tracks the frequency of messages from a particular\r\n// source and decides when messages should be dropped because the source is sending too many\r\n// messages.\r\n//\r\n// We utilize this in ChatRoom, above, to apply a per-IP-address rate limit. These limits are\r\n// global, i.e. they apply across all chat rooms, so if a user spams one chat room, they will find\r\n// themselves rate limited in all other chat rooms simultaneously.\r\nexport class RateLimiter {\r\n  constructor(state, env) {\r\n    // Timestamp at which this IP will next be allowed to send a message. Start in the distant\r\n    // past, i.e. the IP can send a message now.\r\n    this.nextAllowedTime = 0;\r\n  }\r\n\r\n  // Our protocol is: POST when the IP performs an action, or GET to simply read the current limit.\r\n  // Either way, the result is the number of seconds to wait before allowing the IP to perform its\r\n  // next action.\r\n  async fetch(request) {\r\n    return await handleErrors(request, async () => {\r\n      let now = Date.now() / 1000;\r\n\r\n      this.nextAllowedTime = Math.max(now, this.nextAllowedTime);\r\n\r\n      if (request.method == \"POST\") {\r\n        // POST request means the user performed an action.\r\n        // We allow one action per 5 seconds.\r\n        this.nextAllowedTime += 5;\r\n      }\r\n\r\n      // Return the number of seconds that the client needs to wait.\r\n      //\r\n      // We provide a \"grace\" period of 20 seconds, meaning that the client can make 4-5 requests\r\n      // in a quick burst before they start being limited.\r\n      let cooldown = Math.max(0, this.nextAllowedTime - now - 20);\r\n      return new Response(cooldown);\r\n    })\r\n  }\r\n}\r\n\r\n// RateLimiterClient implements rate limiting logic on the caller's side.\r\nclass RateLimiterClient {\r\n  // The constructor takes two functions:\r\n  // * getLimiterStub() returns a new Durable Object stub for the RateLimiter object that manages\r\n  //   the limit. This may be called multiple times as needed to reconnect, if the connection is\r\n  //   lost.\r\n  // * reportError(err) is called when something goes wrong and the rate limiter is broken. It\r\n  //   should probably disconnect the client, so that they can reconnect and start over.\r\n  constructor(getLimiterStub, reportError) {\r\n    this.getLimiterStub = getLimiterStub;\r\n    this.reportError = reportError;\r\n\r\n    // Call the callback to get the initial stub.\r\n    this.limiter = getLimiterStub();\r\n\r\n    // When `inCooldown` is true, the rate limit is currently applied and checkLimit() will return\r\n    // false.\r\n    this.inCooldown = false;\r\n  }\r\n\r\n  // Call checkLimit() when a message is received to decide if it should be blocked due to the\r\n  // rate limit. Returns `true` if the message should be accepted, `false` to reject.\r\n  checkLimit() {\r\n    if (this.inCooldown) {\r\n      return false;\r\n    }\r\n    this.inCooldown = true;\r\n    this.callLimiter();\r\n    return true;\r\n  }\r\n\r\n  // callLimiter() is an internal method which talks to the rate limiter.\r\n  async callLimiter() {\r\n    try {\r\n      let response;\r\n      try {\r\n        // Currently, fetch() needs a valid URL even though it's not actually going to the\r\n        // internet. We may loosen this in the future to accept an arbitrary string. But for now,\r\n        // we have to provide a dummy URL that will be ignored at the other end anyway.\r\n        response = await this.limiter.fetch(\"https://dummy-url\", {method: \"POST\"});\r\n      } catch (err) {\r\n        // `fetch()` threw an exception. This is probably because the limiter has been\r\n        // disconnected. Stubs implement E-order semantics, meaning that calls to the same stub\r\n        // are delivered to the remote object in order, until the stub becomes disconnected, after\r\n        // which point all further calls fail. This guarantee makes a lot of complex interaction\r\n        // patterns easier, but it means we must be prepared for the occasional disconnect, as\r\n        // networks are inherently unreliable.\r\n        //\r\n        // Anyway, get a new limiter and try again. If it fails again, something else is probably\r\n        // wrong.\r\n        this.limiter = this.getLimiterStub();\r\n        response = await this.limiter.fetch(\"https://dummy-url\", {method: \"POST\"});\r\n      }\r\n\r\n      // The response indicates how long we want to pause before accepting more requests.\r\n      let cooldown = +(await response.text());\r\n      await new Promise(resolve => setTimeout(resolve, cooldown * 1000));\r\n\r\n      // Done waiting.\r\n      this.inCooldown = false;\r\n    } catch (err) {\r\n      this.reportError(err);\r\n    }\r\n  }\r\n}\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"E:\\\\code\\\\workers-chat-puzzle\\\\src\\\\chat.mjs\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\SouKon\\\\AppData\\\\Roaming\\\\nvm\\\\v24.4.0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\n\n\t\t\t\texport * from \"E:\\\\code\\\\workers-chat-puzzle\\\\src\\\\chat.mjs\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"E:\\\\code\\\\workers-chat-puzzle\\\\.wrangler\\\\tmp\\\\bundle-cOcfh1\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\SouKon\\\\AppData\\\\Roaming\\\\nvm\\\\v24.4.0\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"E:\\\\code\\\\workers-chat-puzzle\\\\.wrangler\\\\tmp\\\\bundle-cOcfh1\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"E:\\\\code\\\\workers-chat-puzzle\\\\.wrangler\\\\tmp\\\\bundle-cOcfh1\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["id"]
}
